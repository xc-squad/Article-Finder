
import os

#install google trans: pip install googletrans
from googletrans import Translator

#install bs4 module : pip install bs4

import requests
from bs4 import BeautifulSoup

##------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def articleReturn(url):
    article=""
    r = requests.get(url)#load data
    soup = BeautifulSoup(r.text, 'html.parser')#load data into bs4, make an object  
    bodycontent= soup.find("div", {"class":"story-body"})
    
    for p in bodycontent.find_all("p", {"class":"story-body-text story-content"}):
        sentence=p.text.strip("p")#will return Nontype object is not callable is no .text
        article+=sentence+"</p><br></br><p> "
        
    return article
        
#articleReturn function uses a similar format to the example source-
#code in Engineering Man's video: "Python Web Scraping with Beautiful Soup and Regex"


##------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def translate(word):
    translator = Translator()
    r=translator.translate(word)
    return(r.text)

#translator function uses the free open-source module: googletrans for python

##------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


url=input("url:")
string=articleReturn(url)

#converting artilce to list of words
wordList = string.split()
iterations=len(wordList)

popUpContent=""
styleType=""
p=""
leftover=""

#for each word in the article, a styleType and Popupcontent box must be created
#Both run in the HTML document in JS format

for i in range(0,iterations): #popupBoxPosition starts at 0; words are in a list
    word=wordList[i]


    styleType+= '''#popupBox'''+str(i)+'''Position{
                                top: 0; left: 0; position: fixed; width: 100%; height: 120%;
                                background-color: rgba(0,0,0,0.7); display: none;}
                '''

    popUpContent+='''<div id="popupBox'''+str(i)+'''Position"> 
                            <div class="popupBoxWrapper">
                                    <div class="popupBoxContent">
                                            <h3>'''+wordList[i]+'''</h3>
                                            <p>'''+translate(word)+'''</p>
                                            <p>Click <a href="javascript:void(0)" onclick="toggle_visibility('popupBox'''+str(i)+'''Position');">here</a> to close</p>
                                            
                                    </div>
                            </div>
                    </div>

                 '''
#for each occurance of 11 characters, a cluster of links displayed as the original characters
#are embedded in a p tag, creating a single row of characters
    if i%11 == 0 and i!=0:
        wrapper="" 
        
        for x in range(i-11, i):
            
            wrapper+='''<a href="javascript:void(0)" style="text-decoration:none; color: #000000; font-size:24px;" onclick="toggle_visibility('popupBox'''+str(x)+'''Position')">'''+wordList[x]+'''  </a>'''
        p+='''<p>'''+wrapper+'''</p>'''

#leftover characters embedded in a p tag
        
n=(iterations//11)*11
for x in range(n,iterations):
    leftover+='''<a href="javascript:void(0)" style="text-decoration:none; color: #000000; font-size:24px;" onclick="toggle_visibility('popupBox'''+str(x)+'''Position')">'''+wordList[x]+'''  </a>'''


##------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#CSS template

stringToSave=(

'''<!DOCTYPE html>

        <head>
                <title>Simple Popup Boxes</title>

                <script type="text/javascript">
                        <!--
                            function toggle_visibility(id) {
                               var e = document.getElementById(id);
                               if(e.style.display == 'block')
                                  e.style.display = 'none';
                               else
                                  e.style.display = 'block';
                            }
                        //-->
                </script>

                <style type="text/css">

                        '''+styleType+'''
                        
                        .popupBoxWrapper{
                                width: 550px; margin: 50px auto; text-align: left;
                        }
                        .popupBoxContent{
                                background-color: #FFF; padding: 15px;
                        }

                </style>

        </head>

        <body>

                '''+popUpContent+'''

                <div id="wrapper" align="center">

                        '''+p+'''
                        '''+leftover+'''

                </div>

        </body>

</html>'''
    )

#pop-up box formatting in CSS is inspired by mjdwebdesign's video:
#"HTML, CSS & JS - Creating quick, simple popup boxes"


##------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Export CSS to a writing document, saved as an HTML file

fileName = "project.html"
myFile = open(fileName,'w')#w stands for writing

myFile.write(stringToSave)

myFile.close()#close file to modify

#open webpage
os.startfile(fileName)





